[{"path":"https://jakubsob.github.io/muttest/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 muttest authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (‚ÄúSoftware‚Äù), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED ‚Äú‚Äù, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jakubsob.github.io/muttest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jakub Sobolewski. Author, maintainer.","code":""},{"path":"https://jakubsob.github.io/muttest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Sobolewski J (2025). muttest: Mutation Testing. R package version 0.1.0, https://jakubsob.github.io/muttest/.","code":"@Manual{,   title = {muttest: Mutation Testing},   author = {Jakub Sobolewski},   year = {2025},   note = {R package version 0.1.0},   url = {https://jakubsob.github.io/muttest/}, }"},{"path":"https://jakubsob.github.io/muttest/index.html","id":"muttest-","dir":"","previous_headings":"","what":"Mutation Testing","title":"Mutation Testing","text":"Mutation testing frameworks work intentionally introducing small changes (called mutations) code check whether tests can detect . goal evaluate effective test suite ‚Äî tests fail code altered, ‚Äôs good sign. don‚Äôt, tests might missing something important.","code":""},{"path":"https://jakubsob.github.io/muttest/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Mutation Testing","text":"Given codebase : tests : running muttest::test() ‚Äôll get report mutation score: mutation score : Mutation Score=Killed MutantsTotal Mutants√ó100%\\text{Mutation Score} = \\frac{\\text{Killed Mutants}}{\\text{Total Mutants}} \\times 100\\%, Mutant defined variant original code used test robustness test suite. example 2 mutants code: Tests run variants code. first test run first mutant pass, result still 0. second test run second mutant fail, result Inf. second test pass mutants, result still numeric. killed 1 mutant 2, mutation score 50%.","code":"#' R/calculate.R calculate <- function(x, y) {   (x + y) * 0 } #' tests/testthat/test_calculate.R test_that(\"calculate always returns 0\", {   expect_equal(calculate(2, 2), 0) })  test_that(\"calculate returns a numeric\", {   expect_true(is.numeric(calculate(2, 2))) }) muttest::test(   path = \"tests/testthat\",   source_path = \"R\",   mutators = list(operator(\"+\", \"-\"), operator(\"*\", \"/\")) ) #> v Mutation score: 50% #' R/calculate.R calculate <- function(x, y) {   (x - y) * 0 # mutant 1: \"+\" -> \"-\" } #' R/calculate.R calculate <- function(x, y) {   (x + y) / 0 # mutant 2: \"*\" -> \"/\" } #' tests/testthat/test_calculate.R test_that(\"calculate always returns 0\", {   # üü¢ This test doesn't kill \"+\" -> \"-\" operator mutant: (2 - 2) * 0 = 0   # ‚ùå This test kills \"*\" -> \"/\" operator mutant: (2 + 2) / 0 = Inf   expect_equal(calculate(2, 2), 0) })  test_that(\"calculate returns a numeric\", {   # üü¢ This test doesn't kill \"+\" -> \"-\", (2 - 2) * 0 = 0, is numeric   # üü¢ This test doesn't kill \"*\" -> \"/\", (2 + 2) / 0 = Inf, is numeric   expect_true(is.numeric(calculate(2, 2))) })"}]
